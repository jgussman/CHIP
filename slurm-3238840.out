anaconda version 2020.07 loaded.
config.json : {'CHIP': {'description': 'Arguments for preprocessing pipeline', 'run': {'val': True, 'description': 'Do you want to run CHIP?'}, 'cross_match_stars': {'val': 'data/spocs/starnames_crossmatch_SPOCS_NEXSCI.txt', 'description': "../SPOCSdata/starnames_crossmatch_SPOCS_NEXSCI.txt, ../SPOCSdata/testStars.txt Cross Match Names file path ---> this txt file must have two columns seperated by a space with headers, one of the columns will the names of the stars in the catalogue you want. The other column must have the column name as 'HIRES' and contain the names of the HIRES identification for the stars."}, 'trim_spectrum': {'val': 50, 'description': 'Remove this many pixels from the left and right edges of EACH echelle order.'}, 'cores': {'val': 4, 'description': 'How many cores on your machine would you like to use? -1 for all.'}}, 'The Cannon': {'description': 'Arguments for The Cannon', 'run': {'val': '2022-12-28_22-13-57', 'description': 'If you want to run The Cannon set val to the name of the dir inside data/chip_runs you want to use (ex: 2022-12-24_06-57-37). Otherwise set to false.'}, 'random seed': {'val': 3, 'description': 'Random seed for reproducability.'}, 'train test split': {'val': 0.4, 'description': 'what fraction of the data set do you want to use for testing (ex: 0.4, 60% of the data set will be used for training, and 40% will be used for testing the best model)'}, 'stellar parameters': {'val': ['TEFF', 'LOGG', 'VSINI', 'FeH', 'CH', 'NH', 'OH', 'NaH', 'MgH', 'AlH', 'SiH', 'CaH', 'TiH', 'VH', 'CrH', 'MnH', 'NiH', 'YH'], 'description': 'A list of the stellar parameters you want to train The Cannon on. The names need to reflect the spelling in data/spocs/stellar_parameters.csv.'}, 'cost function': {'name': 'Mean Error', 'function': 'lambda true_array,predicted_array:  np.mean( true_array - predicted_array )', 'description': 'A lambda function and associated name of function, for computing the cost of a model.'}, 'masks': {'val': [['Iodine', 'data/constants/masks/by_eye_iodine_mask.npy'], ['None', False]], 'description': "List of masks to apply to all stars; for example: [['Name of Mask','file path to mask'],...,['None',False]]; shape of mask = (data/spocs/wl_solution.npy.shape[0],)"}, 'kfolds': {'val': 2, 'description': 'number of folds for kfold cross validation'}, 'batch size': {'val': 32, 'description': 'number of batches to split the training set into for mini-batch training'}, 'poly orders': {'val': [1, 2], 'description': 'What degree polynomials do you want The Cannon to try to fit to the data? ex: [1,2]'}}}
CHIP v1.0.0
CHIP.download_spectra( )
src/CHIP.py:147: RuntimeWarning: invalid value encountered in sqrt
  SNR = np.mean(np.sqrt(spectrum))
src/CHIP.py:147: RuntimeWarning: invalid value encountered in sqrt
  SNR = np.mean(np.sqrt(spectrum))
src/CHIP.py:147: RuntimeWarning: invalid value encountered in sqrt
  SNR = np.mean(np.sqrt(spectrum))
src/CHIP.py:147: RuntimeWarning: invalid value encountered in sqrt
  SNR = np.mean(np.sqrt(spectrum))
src/CHIP.py:147: RuntimeWarning: invalid value encountered in sqrt
  SNR = np.mean(np.sqrt(spectrum))
src/CHIP.py:147: RuntimeWarning: invalid value encountered in sqrt
  SNR = np.mean(np.sqrt(spectrum))
src/CHIP.py:147: RuntimeWarning: invalid value encountered in sqrt
  SNR = np.mean(np.sqrt(spectrum))
src/CHIP.py:147: RuntimeWarning: invalid value encountered in sqrt
  SNR = np.mean(np.sqrt(spectrum))
src/CHIP.py:147: RuntimeWarning: invalid value encountered in sqrt
  SNR = np.mean(np.sqrt(spectrum))
src/CHIP.py:147: RuntimeWarning: invalid value encountered in sqrt
  SNR = np.mean(np.sqrt(spectrum))
src/CHIP.py:147: RuntimeWarning: invalid value encountered in sqrt
  SNR = np.mean(np.sqrt(spectrum))
src/CHIP.py:147: RuntimeWarning: invalid value encountered in sqrt
  SNR = np.mean(np.sqrt(spectrum))
src/CHIP.py:147: RuntimeWarning: invalid value encountered in sqrt
  SNR = np.mean(np.sqrt(spectrum))
src/CHIP.py:147: RuntimeWarning: invalid value encountered in sqrt
  SNR = np.mean(np.sqrt(spectrum))
src/CHIP.py:147: RuntimeWarning: invalid value encountered in sqrt
  SNR = np.mean(np.sqrt(spectrum))
src/CHIP.py:147: RuntimeWarning: invalid value encountered in sqrt
  SNR = np.mean(np.sqrt(spectrum))
src/CHIP.py:147: RuntimeWarning: invalid value encountered in sqrt
  SNR = np.mean(np.sqrt(spectrum))
src/CHIP.py:147: RuntimeWarning: invalid value encountered in sqrt
  SNR = np.mean(np.sqrt(spectrum))
src/CHIP.py:147: RuntimeWarning: invalid value encountered in sqrt
  SNR = np.mean(np.sqrt(spectrum))
src/CHIP.py:147: RuntimeWarning: invalid value encountered in sqrt
  SNR = np.mean(np.sqrt(spectrum))
src/CHIP.py:147: RuntimeWarning: invalid value encountered in sqrt
  SNR = np.mean(np.sqrt(spectrum))
src/CHIP.py:147: RuntimeWarning: invalid value encountered in sqrt
  SNR = np.mean(np.sqrt(spectrum))
src/CHIP.py:147: RuntimeWarning: invalid value encountered in sqrt
  SNR = np.mean(np.sqrt(spectrum))
src/CHIP.py:147: RuntimeWarning: invalid value encountered in sqrt
  SNR = np.mean(np.sqrt(spectrum))
src/CHIP.py:147: RuntimeWarning: invalid value encountered in sqrt
  SNR = np.mean(np.sqrt(spectrum))
src/CHIP.py:147: RuntimeWarning: invalid value encountered in sqrt
  SNR = np.mean(np.sqrt(spectrum))
src/CHIP.py:147: RuntimeWarning: invalid value encountered in sqrt
  SNR = np.mean(np.sqrt(spectrum))
src/CHIP.py:147: RuntimeWarning: invalid value encountered in sqrt
  SNR = np.mean(np.sqrt(spectrum))
src/CHIP.py:147: RuntimeWarning: invalid value encountered in sqrt
  SNR = np.mean(np.sqrt(spectrum))
src/CHIP.py:147: RuntimeWarning: invalid value encountered in sqrt
  SNR = np.mean(np.sqrt(spectrum))
src/CHIP.py:147: RuntimeWarning: invalid value encountered in sqrt
  SNR = np.mean(np.sqrt(spectrum))
src/CHIP.py:147: RuntimeWarning: invalid value encountered in sqrt
  SNR = np.mean(np.sqrt(spectrum))
src/CHIP.py:147: RuntimeWarning: invalid value encountered in sqrt
  SNR = np.mean(np.sqrt(spectrum))
src/CHIP.py:147: RuntimeWarning: invalid value encountered in sqrt
  SNR = np.mean(np.sqrt(spectrum))
src/CHIP.py:147: RuntimeWarning: invalid value encountered in sqrt
  SNR = np.mean(np.sqrt(spectrum))
src/CHIP.py:147: RuntimeWarning: invalid value encountered in sqrt
  SNR = np.mean(np.sqrt(spectrum))
src/CHIP.py:147: RuntimeWarning: invalid value encountered in sqrt
  SNR = np.mean(np.sqrt(spectrum))
src/CHIP.py:147: RuntimeWarning: invalid value encountered in sqrt
  SNR = np.mean(np.sqrt(spectrum))
src/CHIP.py:147: RuntimeWarning: invalid value encountered in sqrt
  SNR = np.mean(np.sqrt(spectrum))
src/CHIP.py:147: RuntimeWarning: invalid value encountered in sqrt
  SNR = np.mean(np.sqrt(spectrum))
src/CHIP.py:147: RuntimeWarning: invalid value encountered in sqrt
  SNR = np.mean(np.sqrt(spectrum))
src/CHIP.py:147: RuntimeWarning: invalid value encountered in sqrt
  SNR = np.mean(np.sqrt(spectrum))
src/CHIP.py:147: RuntimeWarning: invalid value encountered in sqrt
  SNR = np.mean(np.sqrt(spectrum))
src/CHIP.py:147: RuntimeWarning: invalid value encountered in sqrt
  SNR = np.mean(np.sqrt(spectrum))
src/CHIP.py:147: RuntimeWarning: invalid value encountered in sqrt
  SNR = np.mean(np.sqrt(spectrum))
src/CHIP.py:147: RuntimeWarning: invalid value encountered in sqrt
  SNR = np.mean(np.sqrt(spectrum))
src/CHIP.py:147: RuntimeWarning: invalid value encountered in sqrt
  SNR = np.mean(np.sqrt(spectrum))
src/CHIP.py:147: RuntimeWarning: invalid value encountered in sqrt
  SNR = np.mean(np.sqrt(spectrum))
src/CHIP.py:147: RuntimeWarning: invalid value encountered in sqrt
  SNR = np.mean(np.sqrt(spectrum))
Successful login as jgussman
Traceback (most recent call last):
  File "src/CHIP.py", line 794, in <module>
    chip.run()
  File "src/CHIP.py", line 102, in run
    self.download_spectra()
  File "src/CHIP.py", line 314, in download_spectra
    self.update_removedstars()
  File "src/CHIP.py", line 205, in update_removedstars
    pd.DataFrame(self.removed_stars).to_csv( os.path.join(self.storage_path ,"removed_stars.csv"),
  File "/N/u/jgussman/Carbonate/.local/lib/python3.8/site-packages/pandas/core/frame.py", line 468, in __init__
    mgr = init_dict(data, index, columns, dtype=dtype)
  File "/N/u/jgussman/Carbonate/.local/lib/python3.8/site-packages/pandas/core/internals/construction.py", line 283, in init_dict
    return arrays_to_mgr(arrays, data_names, index, columns, dtype=dtype)
  File "/N/u/jgussman/Carbonate/.local/lib/python3.8/site-packages/pandas/core/internals/construction.py", line 78, in arrays_to_mgr
    index = extract_index(arrays)
  File "/N/u/jgussman/Carbonate/.local/lib/python3.8/site-packages/pandas/core/internals/construction.py", line 397, in extract_index
    raise ValueError("arrays must all be same length")
ValueError: arrays must all be same length
Finished
